/* 3D Touch Plate Probing macro modified by Matt Middleton (pionex@gmail.com)
   Based on work found at https://www.cncnutz.com/p/autozero-tool.html
   by:
   John Revill (admin@metchit.com.au)
   Big TEX who created the original Script that this is based on.
   Glen Higgs
*/


double clearance = 5; //(clearance around plate)

double probeYDistance = 60;  //( distance to move before probing Y)
double probeXDistance = 60;  //( distance to move before probing X)
double probeXYDistanceBelowPlate = 5; //( distance to move below top of plate for x and Y probe)
double endmillDiameter = 6;  //( Diameter of endmill )

// (XYZ Touchplate dimensions)
double zThickness = 5;
double xWidthOffset = 15;  //( X width offset )
double yWidthOffset = 15;  //( Y width offset )


//===== Adjust the values below to the tool height adapter thickness and other options to setup macro
bool Imperial = false;         // Set to true if you are using Imperial measurments.
bool SwitchedTouchoff = false; // If your touchoff is microswitch based, change to true


//===== The values below should not need to be changed (but it's a free world ;-) )
bool UsePreTouch = true;              // Set to false if you wish to disable the Pretouch test before probing (not recomended)
bool BeepOnPreTouch = true;           // Set to false if you wish to diable the pretouch test beep that occurs on test contact.
double Zmin = Imperial ? -4 : -100;   //Max.Z depth (default 4" or 100mm)
double FeedrateFast = 0;              // Feedrate for 1st probing (0 = Auto Calculate)
double FeedrateSlow = 0;              // Slow Feedrate for 2nd probing (0 = Auto Calculate to stop within 1 step.) (If manually set too fast the final result will be inaccurate use 30mm or slower )  
double SafeZ = Imperial ? 4 : 100;    // (default 4" or 100mm)
double RetractHeight = Imperial ? 0.4 : 10; // The retract height above plate after final probe (default 0.4" or 10mm)
double RetractForSecondMeasurement = Imperial ? 0.059 : 1.5;      // Height that the cutter retacts before making 2nd pass (default 0.059" or 1.5mm)
int PreTouchDelay = 2000;             // Delay time to allow the touchoff plate to be placed back on the table (in MilliSeconds)
double FastStopDistanceSwitched = Imperial ? 0.002 : 0.05;      // The distance to stop on a fast feed when using a switched touchoff. (default 0.002" or 0.05mm)
double FastStopDistanceSolid = Imperial ? 0.00079 : 0.02;       // The distance to stop on a fast feed when using a solid touchoff plate. (default 0.00079" or 0.02mm)

//=====================================================================================

// Calculate the Auto Feed rate for probing.
string stAccel = AS3.Getfield(40); // Read the value of Acceleration on the Z Axis
string stSteps = AS3.Getfield(38); // Read the value to Steps per Unit on the Z Axis
double dAccel = Convert.ToDouble(stAccel);
double dSteps = Convert.ToDouble(stSteps);
double StopDistance = SwitchedTouchoff ? FastStopDistanceSwitched : FastStopDistanceSolid; // Set the StopDistance based on the probe type
if (FeedrateFast == 0) {
    FeedrateFast = (Math.Sqrt((2*StopDistance)/dAccel)*dAccel)*60; // Calculate feedrate to stop in 0.05mm of deceleration. This should not  damage the bit.
    if (FeedrateFast > 10) {
        FeedrateFast = Math.Floor(FeedrateFast); // Round down to a whole number
    } else {
        FeedrateFast = Math.Floor(FeedrateFast*10)/10; // Round down to 1 decimal place
    }
    if (FeedrateFast == 0) {
        FeedrateFast = 0.1;
    }
}
if (FeedrateSlow == 0) {
    FeedrateSlow = (Math.Sqrt((0.34/dSteps)/dAccel)*dAccel)*60; // Calculate feedrate to stop in 17% of a step. The controller should be able to stop instantly.
    if (FeedrateSlow > 5) {
        FeedrateSlow = Math.Floor(FeedrateSlow); // Round down to a whole number
    } else {
        FeedrateSlow = Math.Floor(FeedrateSlow*10)/10; // Round down to 1 decimal place
    }
    if (FeedrateSlow == 0) {
        FeedrateSlow = 0.1;
    }
}
exec.AddStatusmessage("Probe Slow,Fast Feed set ["+FeedrateSlow+","+FeedrateFast+"]");


bool DoDualCycle = true; //Do probing from 2 cycles, first with Fast and second with Slow feedrates
// WARNING. Do not use too fast a feed rate for your first touch off if using an unspring sensor,
//          i.e. solid block of aluminium.
//          Doing so may damage your bit or router. This is because of the de-acceleration required to stop the Z Axis.

// For machines that have homing switches and soft limits, Homing is required.
if (!(AS3.Getfielddouble(5)==0 && AS3.Getfielddouble(245)==0 && AS3.Getfielddouble(20)==0 && AS3.Getfielddouble(250)==0 && AS3.Getfielddouble(35)==0 && AS3.Getfielddouble(2555)==0)){ // Are Homing switched defined
    if(!exec.GetLED(56)||!exec.GetLED(57)||!exec.GetLED(58)) // If machine was not homed then it is unsafe to move in machine coordinates, stop here...
    {
        MessageBox.Show("The machine has not been homed yet, HOME before executing!");
        exec.Stop();
        return;
    }
}

while(exec.IsMoving()){}
exec.Wait(200);

double XOriginalPosMachine = exec.GetXmachpos(); // Get the current machine coordinates
double YOriginalPosMachine = exec.GetYmachpos(); // Get the current machine coordinates

//Read Original Values to be restored at the end.
int CurrentModalMode = exec.actualmodal; // Modal mode (G0, G1, ...)
int CurrentDistanceMode = exec.actualdistmode; // Distance mode (G90, G91)
double CurrentFeed = AS3.Getfielddouble(867); // Current Feedrate
string ReadFRODRO = AS3.Getfield(232); // Current Feedrate Override
double CurrentFeedOverride = Convert.ToDouble(ReadFRODRO.Replace("%", String.Empty)); // convert to numerical value

// Set Feedrate Overrride to 100%
AS3.Setfield(100, 232); // Set FeedOverride to 100%
AS3.Validatefield(232); // Validate to field value

//double nominal = exec.Question("To probe from the Spoilboard surface, enter the nominal thickness of the material. Enter 0 if probing from the material surface");
string stNominal = exec.TextQuestion("To probe from the Spoilboard surface, enter the nominal thickness of the material. Enter '0' or leave blank if probing from the material surface");
double Nominal = 0;
if(!(stNominal == ""))
{  
  Nominal = Convert.ToDouble(stNominal);
} 

if (UsePreTouch) {
  if (SwitchedTouchoff){
     exec.AddStatusmessage(" ");
     exec.AddStatusmessage("============================================");
     exec.AddStatusmessage("press its button to start probing.");
     exec.AddStatusmessage("Place the touch probe under the tool bit and");
     exec.AddStatusmessage("============== MESSAGE=======================");
  } else {
     exec.AddStatusmessage(" ");
     exec.AddStatusmessage("============================================");
     exec.AddStatusmessage("tap it against the tool bit to start probing.");
     exec.AddStatusmessage("Place the touch probe plate under the tool bit and");
     exec.AddStatusmessage("============== MESSAGE=======================");
  }

  // Wait 30 seconds for probe activation
  int seconds = 30;
  int ticker = seconds * 20; // 20 ticks per second
  bool Touched_Flag = false;
  while (ticker > 0) {
    if (exec.GetLED(37)) {
        //Beep
        Touched_Flag = true;
		ticker = 0;
        break;
    }
    exec.Wait(50);
    ticker = ticker - 1;
  }

  // Wait 5 seconds for probe deactivation
  if (Touched_Flag) {
    Touched_Flag = false;
    seconds = 5;
    ticker = seconds * 20; // 20 ticks per second
    while (ticker > 0) {
      if (!exec.GetLED(37)) {
          //Beep
          Touched_Flag = true;
		  ticker = 0;
          break;
      }
      exec.Wait(50);
      ticker = ticker - 1;
    }
  }

  if (Touched_Flag) {
    exec.AddStatusmessage("Touch detected. Starting probe.");
	if (BeepOnPreTouch) {
	    Console.Beep();
	}
    exec.Wait(PreTouchDelay);
  } else {
    exec.AddStatusmessage(" ");
    exec.AddStatusmessage("No touch detected. Aborted");
    MessageBox.Show("The Auto Zero timed out, no touch detected.");
    exec.Stop();
    return;
  }
}

Func<string, double, int> MoveRelative = (string axis, double distance) =>
{
    exec.Code("G91 G0 G54 " + axis + distance);
    while(exec.IsMoving()){}
    exec.Wait(200);
    return 0;
};

Func<string, double, int> MoveAbsolute = (string axis, double position) =>
{
    exec.Code("G90 G0 G54 " + axis + position);
    while(exec.IsMoving()){}
    exec.Wait(200);
    return 0;
};

Func<string, double, int> MoveAbsoluteMachine = (string axis, double position) =>
{
    exec.Code("G90 G0 G53 " + axis + position);
    while(exec.IsMoving()){}
    exec.Wait(200);
    return 0;
};


Func<string, double> GetAxisPosition = (string axis) =>
{
  if (axis.ToUpper() == "X")
    return exec.GetXpos();
  else if (axis.ToUpper() == "Y")
    return exec.GetYpos();
  else if (axis.ToUpper() == "Z")
    return exec.GetZpos();
  else if (axis.ToUpper() == "A")
    return exec.GetApos();
  else if (axis.ToUpper() == "B")
    return exec.GetBpos();
  else if (axis.ToUpper() == "C")
    return exec.GetCpos();
  else
    return -1.0f;
};

Func<string, int> AxisStringToID = (string axis) =>
{
  if (axis.ToUpper() == "X")
    return 0;
  else if (axis.ToUpper() == "Y")
    return 1;
  else if (axis.ToUpper() == "Z")
    return 2;
  else if (axis.ToUpper() == "A")
    return 3;
  else if (axis.ToUpper() == "B")
    return 4;
  else if (axis.ToUpper() == "C")
    return 5;
  else
    return -1;
};

Func<string, double, double, int> Probe = (string axis, double maxDistance, double feedrate) =>
{
    exec.Code("G90 G31 " + axis + " " + maxDistance + "F" + feedrate);
    while(exec.IsMoving()){}
    exec.Wait(200);
    return 0;
};

Func<string, double, double, double, int> ProbeAxis = (string axis, double maxDistance, double plateOffset, double offset2) =>
{
  axis = axis.ToUpper();
  
  double axisPosition = maxDistance;

  // Start the first of the dual probe cycle
  if(DoDualCycle)
  {
    Probe(axis, maxDistance, FeedrateFast);
    axisPosition = GetAxisPosition(axis.ToString());
    MoveRelative(axis, -1 * Math.Sign(maxDistance) * RetractForSecondMeasurement);  // Retract a certain amount for the second probe
  }
  
  //Start the second for the dual probe cycle or the only probe in a single cycle setup.
  Probe(axis, axisPosition, FeedrateSlow);
 
  double newAxisValue = plateOffset + offset2;

  int axisID = AxisStringToID(axis);

  exec.ChangeaxisDROvalue(axisID, newAxisValue.ToString()); //Change the DRO value 
  exec.Wait(200);  //Safety wait for the UC100 syncronisation
 
  return 0;
};


ProbeAxis("Z", Zmin, zThickness, -Nominal);

MoveRelative("Z", clearance);               // Move Z up to safe position
MoveRelative("Y", -1 * probeYDistance);     // Move y to negative side of plate
MoveAbsolute("Z", 0);                       // Move z down to probing level (below top of plate)
ProbeAxis("Y", probeYDistance, -yWidthOffset, -endmillDiameter / 2);

MoveRelative("Y", -clearance);                  // Clear y from edge of plate
MoveAbsolute("Z", clearance);                   // Move z up to safe level
MoveRelative("X", -probeXDistance);             // Move x to negative side of plate
MoveAbsoluteMachine("Y", YOriginalPosMachine);  // Move y to original position that probing started in
MoveAbsolute("Z", 0);                           // Move z down to probing level
ProbeAxis("X", probeXDistance, -xWidthOffset, -endmillDiameter / 2);

MoveRelative("X", -clearance);          // Clear x from edge of plate
MoveAbsolute("Z", zThickness + 10);     // Move 10mm above probe plate
MoveAbsolute("X", 0);                   // Move to X0 work coordinates
MoveAbsolute("Y", 0);                   // Move to Y0 work coordinates

// Restore original modes and feed
exec.Code("G" + CurrentDistanceMode); // Set Distance Mode back to previous (G90, G91, Etc)
exec.Code("G" + CurrentModalMode); // Set Modal Mode back to previous (G0, G1, etc)
exec.Code("F" + CurrentFeed); // Set Feedrate back to previous
AS3.Setfield(CurrentFeedOverride, 232); // Set FeedOverride back
AS3.Validatefield(232); // Validate to field value
exec.Wait(200);

exec.AddStatusmessage("Probe Complete.");



